if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
plot(r$fpr,r$tpr)
r <- roc(test.y, pred)
r
glm.pred = predict(glm.fit,test.x,type="response")
summary(glm.pred)
quant = quantile(glm.pred,seq(0,1,0.01))
length(quant)
sens <- rep(NA,N)
spec <- rep(NA,N)
N = length(quant)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(glm.pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
y = test.y
for (i in 1:N) {
predClass <- as.numeric(glm.pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
sens
for (i in 1:N) {
predClass <- as.numeric(glm.pred >= quant[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
sens
spec
roc <- function(y, pred) {
alpha <- quantile(pred, seq(0,1,by=0.01))
N <- length(alpha)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(predClass == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(predClass == 0)
}
return(list(fpr=1- spec, tpr=sens))
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
r
for (i in 1:N) {
predClass <- as.numeric(glm.pred >= quant[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
spec
roc(test.y,glm.pred)
roc <- function(y, pred) {
alpha <- quantile(pred, seq(0,1,by=0.01))
N <- length(alpha)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / (sum(y == 1) + 0.000001)
spec[i] <- sum(predClass == 0 & y == 0) / (sum(y == 0) + 0.000001)
}
return(list(fpr=1 - spec, tpr=sens))
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
z = 3 if 3>4 else 4
z = ifelse(3>4,3,4)
z
roc <- function(y, pred) {
alpha <- quantile(pred, seq(0,1,by=0.01))
N <- length(alpha)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
return(list(fpr=1 - spec, tpr=sens))
}
alphaall <- seq(0, 1, length.out = 10)
auc_all <- c()
lambda_all <- c()
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
roc <- function(y, pred) {
alpha <- quantile(pred, seq(0,1,by=0.01))
N <- length(alpha)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
if(sens[i] > 1 | spec[i] > 1){
print(sens[i],spec[i])
}
}
return(list(fpr=1 - spec, tpr=sens))
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
diff(c(0,seq(0,1,0.1)))
auc <- function(r) {
sum((r$fpr) * diff(c(0,r$tpr)))
}
roc <- function(y, pred) {
alpha <- quantile(pred, seq(0,1,by=0.01))
N <- length(alpha)
sens <- rep(NA,N)
spec <- rep(NA,N)
for (i in 1:N) {
predClass <- as.numeric(pred >= alpha[i])
sens[i] <- sum(predClass == 1 & y == 1) / sum(y == 1)
spec[i] <- sum(predClass == 0 & y == 0) / sum(y == 0)
}
return(list(fpr=1 - spec, tpr=sens))
}
auc <- function(r) {
sum((r$fpr) * diff(c(0,r$tpr)))
}
alphaall <- seq(0, 1, length.out = 10)
auc_all <- c()
lambda_all <- c()
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(1 * cbind(1,as.matrix(test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1, test.x) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * cbind(1, test.x) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * as.matrix(cbind(1, test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(auc(r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
install.packages("wordnet")
library(wordnet)
alphaall <- seq(0, 1, length.out = 10)
auc_all <- c()
lambda_all <- c()
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * as.matrix(cbind(1, test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(r$fpr,r$tpr)
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
for (i in 1:length(alphaall)) {
alpha <- alphaall[i]
outLasso <- glmnet(as.matrix(train.x), train.y, family="binomial", alpha = alpha)
aucValsLasso <- rep(NA, length(outLasso$lambda))
for (j in 1:length(outLasso$lambda)) {
pred <- 1 / (1 + exp(-1 * as.matrix(cbind(1, test.x)) %*% coef(outLasso)[,j]))
r <- roc(test.y, pred)
plot(r$fpr,r$tpr)
if(auc(r)>1){
print(c(j,r))
}
aucValsLasso[j] <- auc(r)
}
best <- which.max(aucValsLasso)
auc_all <- c(auc_all, aucValsLasso[best])
lambda_all <- c(lambda_all, outLasso$lambda[best])
}
a = seq(0, 1, 0.1)
lambda = rep(NA, 11)
elnetPredMat = matrix(NA, length(test.y), 11)
evaMat = matrix(NA, 6, 11)
auc = rep(NA,11)
for (i in 1:11){
alpha = a[i]
elnet.cv = cv.glmnet(as.matrix(train.x),train.y,alpha = alpha,nfolds = 5,family = 'binomial',type.measure='auc')
elnet.cv2 = glmnet(as.matrix(train.x),train.y,alpha = alpha, lambda = elnet.cv$lambda.min,family = 'binomial')
lambda[i] = elnet.cv$lambda.min
yhat = predict(elnet.cv2,as.matrix(test.x))
auc[i] = auc(roc(test.y,yhat))
elnetPredMat[,i] = yhat>=0.65
(temp = eva(yhat,test.y))
evaMat[,i] = as.vector(temp)
}
auc
a = seq(0, 1, 0.1)
lambda = rep(NA, 11)
elnetPredMat = matrix(NA, length(test.y), 11)
evaMat = matrix(NA, 6, 11)
auc_all = rep(NA,11)
for (i in 1:11){
alpha = a[i]
elnet.cv = cv.glmnet(as.matrix(train.x),train.y,alpha = alpha,nfolds = 5,family = 'binomial',type.measure='auc')
elnet.cv2 = glmnet(as.matrix(train.x),train.y,alpha = alpha, lambda = elnet.cv$lambda.min,family = 'binomial')
lambda[i] = elnet.cv$lambda.min
yhat = predict(elnet.cv2,as.matrix(test.x),type='response')
auc_all[i] = auc(roc(test.y,yhat))
elnetPredMat[,i] = yhat>=0.65
(temp = eva(yhat,test.y))
evaMat[,i] = as.vector(temp)
}
auc_all
lambda
yhat
summary(yaht)
summary(yhat)
roc(test.y, yhat)
r = roc(test.y, yhat)
auc(r)
auc <- function(r) {
sum((r$fpr) * diff(c(0,r$tpr)))
}
auc(r)
a = seq(0, 1, 0.1)
lambda = rep(NA, 11)
elnetPredMat = matrix(NA, length(test.y), 11)
evaMat = matrix(NA, 6, 11)
auc_all = rep(NA,11)
for (i in 1:11){
alpha = a[i]
elnet.cv = cv.glmnet(as.matrix(train.x),train.y,alpha = alpha,nfolds = 5,family = 'binomial',type.measure='auc')
elnet.cv2 = glmnet(as.matrix(train.x),train.y,alpha = alpha, lambda = elnet.cv$lambda.min,family = 'binomial')
lambda[i] = elnet.cv$lambda.min
yhat = predict(elnet.cv2,as.matrix(test.x),type="response")
auc_all[i] = auc(roc(test.y,yhat))
elnetPredMat[,i] = yhat>=0.65
(temp = eva(yhat,test.y))
evaMat[,i] = as.vector(temp)
}
auc_all
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
abline(medv~lstat,Boston)
?abline
fit1=lm(medv~lstat,data=Boston)
fit1
abline(fit1)
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
fix(Carseats)
names(Carseats)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
?Constants
?constrasts
?contrasts
summary(fit1)
contrasts(Carseats$ShelveLoc)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
summary(glm.probs)
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
dim(lda.pred)
length(lda.pred)
Smarket.2005=subset(Smarket,Year>=2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
length(lda.pred)
lda.pred[1:3,]
lda.pred[1:3]
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
?lm.influence
loocv(glm.fit)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
